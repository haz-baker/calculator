Index: main program/calculator_gui.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\n\n# Form implementation generated from reading ui file 'calculator_layout_v2.ui'\n#\n# Created by: PyQt5 UI code generator 5.14.0\n#\n# WARNING! All changes made in this file will be lost!\n\n\nfrom PySide2 import QtCore, QtGui, QtWidgets\nfrom PySide2.QtUiTools import QUiLoader\nfrom PySide2.QtWidgets import QApplication\nfrom PySide2.QtCore import QFile, QIODevice\n\nfrom calc_functions import *\n\nclass Ui_Dialog(object):\n\n    #defining variables\n    op = 0\n    operator = \"\"\n    num1 = \"\"\n    num2 = \"\"\n    numb = []\n\n    def setupUi(self, Dialog):\n        Dialog.setObjectName(\"Dialog\")\n        Dialog.resize(216, 215)\n        Dialog.setStyleSheet(\"background-color: rgb(53, 53, 53);\\n\"\n\"color: rgb(255, 255, 255);\")\n\n        self.Button_7 = QtWidgets.QPushButton(Dialog)\n        self.Button_7.setGeometry(QtCore.QRect(10, 50, 51, 41))\n        self.Button_7.setObjectName(\"Button_7\")\n\n        self.Button_8 = QtWidgets.QPushButton(Dialog)\n        self.Button_8.setGeometry(QtCore.QRect(60, 50, 51, 41))\n        self.Button_8.setStyleSheet(\"color: rgb(255, 255, 255);\")\n        self.Button_8.setObjectName(\"Button_8\")\n\n        self.Button_9 = QtWidgets.QPushButton(Dialog)\n        self.Button_9.setGeometry(QtCore.QRect(110, 50, 51, 41))\n        self.Button_9.setObjectName(\"Button_9\")\n        self.Button_4 = QtWidgets.QPushButton(Dialog)\n        self.Button_4.setGeometry(QtCore.QRect(10, 90, 51, 41))\n        self.Button_4.setObjectName(\"Button_4\")\n        self.Button_5 = QtWidgets.QPushButton(Dialog)\n        self.Button_5.setGeometry(QtCore.QRect(60, 90, 51, 41))\n        self.Button_5.setObjectName(\"Button_5\")\n        self.Button_6 = QtWidgets.QPushButton(Dialog)\n        self.Button_6.setGeometry(QtCore.QRect(110, 90, 51, 41))\n        self.Button_6.setObjectName(\"Button_6\")\n        self.Button_1 = QtWidgets.QPushButton(Dialog)\n        self.Button_1.setGeometry(QtCore.QRect(10, 130, 51, 41))\n        self.Button_1.setObjectName(\"Button_1\")\n        self.Button_2 = QtWidgets.QPushButton(Dialog)\n        self.Button_2.setGeometry(QtCore.QRect(60, 130, 51, 41))\n        self.Button_2.setObjectName(\"Button_2\")\n        self.Button_3 = QtWidgets.QPushButton(Dialog)\n        self.Button_3.setGeometry(QtCore.QRect(110, 130, 51, 41))\n        self.Button_3.setObjectName(\"Button_3\")\n        self.Button_0 = QtWidgets.QPushButton(Dialog)\n        self.Button_0.setGeometry(QtCore.QRect(10, 170, 51, 41))\n        self.Button_0.setObjectName(\"Button_0\")\n        self.Button_equals = QtWidgets.QPushButton(Dialog)\n        self.Button_equals.setGeometry(QtCore.QRect(60, 170, 101, 41))\n        palette = QtGui.QPalette()\n        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))\n        brush.setStyle(QtCore.Qt.SolidPattern)\n        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)\n        brush = QtGui.QBrush(QtGui.QColor(255, 170, 0))\n        brush.setStyle(QtCore.Qt.SolidPattern)\n        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)\n        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))\n        brush.setStyle(QtCore.Qt.SolidPattern)\n        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)\n        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))\n        brush.setStyle(QtCore.Qt.SolidPattern)\n        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)\n        brush = QtGui.QBrush(QtGui.QColor(255, 170, 0))\n        brush.setStyle(QtCore.Qt.SolidPattern)\n        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)\n        brush = QtGui.QBrush(QtGui.QColor(255, 170, 0))\n        brush.setStyle(QtCore.Qt.SolidPattern)\n        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)\n        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))\n        brush.setStyle(QtCore.Qt.SolidPattern)\n        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)\n        brush = QtGui.QBrush(QtGui.QColor(255, 170, 0))\n        brush.setStyle(QtCore.Qt.SolidPattern)\n        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)\n        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))\n        brush.setStyle(QtCore.Qt.SolidPattern)\n        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)\n        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))\n        brush.setStyle(QtCore.Qt.SolidPattern)\n        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)\n        brush = QtGui.QBrush(QtGui.QColor(255, 170, 0))\n        brush.setStyle(QtCore.Qt.SolidPattern)\n        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)\n        brush = QtGui.QBrush(QtGui.QColor(255, 170, 0))\n        brush.setStyle(QtCore.Qt.SolidPattern)\n        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)\n        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))\n        brush.setStyle(QtCore.Qt.SolidPattern)\n        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)\n        brush = QtGui.QBrush(QtGui.QColor(255, 170, 0))\n        brush.setStyle(QtCore.Qt.SolidPattern)\n        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)\n        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))\n        brush.setStyle(QtCore.Qt.SolidPattern)\n        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)\n        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))\n        brush.setStyle(QtCore.Qt.SolidPattern)\n        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)\n        brush = QtGui.QBrush(QtGui.QColor(255, 170, 0))\n        brush.setStyle(QtCore.Qt.SolidPattern)\n        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)\n        brush = QtGui.QBrush(QtGui.QColor(255, 170, 0))\n        brush.setStyle(QtCore.Qt.SolidPattern)\n        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)\n        self.Button_equals.setPalette(palette)\n        self.Button_equals.setStyleSheet(\"background-color: rgb(255, 170, 0);\")\n        self.Button_equals.setObjectName(\"Button_equals\")\n        self.Button_add = QtWidgets.QPushButton(Dialog)\n        self.Button_add.setGeometry(QtCore.QRect(160, 170, 51, 41))\n        self.Button_add.setStyleSheet(\"background-color: rgb(255, 170, 0);\")\n        self.Button_add.setObjectName(\"Button_add\")\n        self.Button_sub = QtWidgets.QPushButton(Dialog)\n        self.Button_sub.setGeometry(QtCore.QRect(160, 130, 51, 41))\n        self.Button_sub.setStyleSheet(\"background-color: rgb(255, 170, 0);\")\n        self.Button_sub.setObjectName(\"Button_sub\")\n        self.Button_divide = QtWidgets.QPushButton(Dialog)\n        self.Button_divide.setGeometry(QtCore.QRect(160, 90, 51, 41))\n        self.Button_divide.setStyleSheet(\"background-color: rgb(255, 170, 0);\")\n        self.Button_divide.setObjectName(\"Button_divide\")\n        self.Button_multi = QtWidgets.QPushButton(Dialog)\n        self.Button_multi.setGeometry(QtCore.QRect(160, 50, 51, 41))\n        self.Button_multi.setStyleSheet(\"background-color: rgb(255, 170, 0);\")\n        self.Button_multi.setObjectName(\"Button_multi\")\n        self.Button_clear = QtWidgets.QPushButton(Dialog)\n        self.Button_clear.setGeometry(QtCore.QRect(160, 10, 51, 41))\n        self.Button_clear.setStyleSheet(\"background-color: rgb(255, 170, 0);\")\n        self.Button_clear.setObjectName(\"Button_clear\")\n        self.display = QtWidgets.QLabel(Dialog)\n        self.display.setGeometry(QtCore.QRect(10, 10, 141, 41))\n        font = QtGui.QFont()\n        font.setPointSize(18)\n        self.display.setFont(font)\n        self.display.setLayoutDirection(QtCore.Qt.RightToLeft)\n        self.display.setObjectName(\"display\")\n\n        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n        # all clicked commands for each button connecting to the commands for calculator functions\n        self.Button_clear.clicked.connect(self.clear)\n        self.Button_0.clicked.connect(self.press_0)\n        self.Button_1.clicked.connect(self.press_1)\n        self.Button_2.clicked.connect(self.press_2)\n        self.Button_3.clicked.connect(self.press_3)\n        self.Button_4.clicked.connect(self.press_4)\n        self.Button_5.clicked.connect(self.press_5)\n        self.Button_6.clicked.connect(self.press_6)\n        self.Button_7.clicked.connect(self.press_7)\n        self.Button_8.clicked.connect(self.press_8)\n        self.Button_9.clicked.connect(self.press_9)\n        self.Button_add.clicked.connect(self.plus)\n        self.Button_sub.clicked.connect(self.minus)\n        self.Button_multi.clicked.connect(self.times)\n        self.Button_divide.clicked.connect(self.divide)\n        self.Button_equals.clicked.connect(self.sum)\n\n    def retranslateUi(self, Dialog):\n        _translate = QtCore.QCoreApplication.translate\n        Dialog.setWindowTitle(_translate(\"Dialog\", \"Calculator\"))\n        self.Button_7.setText(_translate(\"Dialog\", \"7\"))\n        self.Button_8.setText(_translate(\"Dialog\", \"8\"))\n        self.Button_9.setText(_translate(\"Dialog\", \"9\"))\n        self.Button_4.setText(_translate(\"Dialog\", \"4\"))\n        self.Button_5.setText(_translate(\"Dialog\", \"5\"))\n        self.Button_6.setText(_translate(\"Dialog\", \"6\"))\n        self.Button_1.setText(_translate(\"Dialog\", \"1\"))\n        self.Button_2.setText(_translate(\"Dialog\", \"2\"))\n        self.Button_3.setText(_translate(\"Dialog\", \"3\"))\n        self.Button_0.setText(_translate(\"Dialog\", \"0\"))\n        self.Button_equals.setText(_translate(\"Dialog\", \"=\"))\n        self.Button_add.setText(_translate(\"Dialog\", \"+\"))\n        self.Button_sub.setText(_translate(\"Dialog\", \"-\"))\n        self.Button_divide.setText(_translate(\"Dialog\", \"/\"))\n        self.Button_multi.setText(_translate(\"Dialog\", \"*\"))\n        self.Button_clear.setText(_translate(\"Dialog\", \"clear\"))\n        self.display.setText(_translate(\"Dialog\", \"<html><head/><body><p align=\\\"right\\\"><span style=\\\" font-size:28pt;\\\">0</span></p></body></html>\"))\n\n\n    def clear(self): # clear command for the calculator display\n        self.display.setText(\"0\") # sets display to 0\n        if self.op == None:\n            self.num1 = \"\"\n        if self.op != None:\n            self.num2 = \"\"\n\n\n\n    def press_0 (self): # connecting function for button 0\n        # if statements to know if to add input to num1 or num2 variable\n        if self.op == 0:\n            self.num1 = numbers1(self.op, \"0\", self.num1) # calls function to add to num1\n            self.display.setText(self.num1) # sets display to numbers currently being added\n\n        elif self.op != 0:\n            self.num2 = numbers2(self.op, \"0\", self.num2)  # calls function to add to num2\n            self.display.setText(self.num2) # sets display to numbers currently being added\n\n    def press_1 (self): # connecting function for button 1\n        # if statements to know if to add input to num1 or num2 variable\n        if self.op == 0:\n            self.num1 = numbers1(self.op, \"1\", self.num1) # calls function to add to num1\n            self.display.setText(self.num1) # sets display to numbers currently being added\n\n        elif self.op!= 0:\n            self.num2 = numbers2(self.op, \"1\", self.num2)  # calls function to add to num2\n            self.display.setText(self.num2) # sets display to numbers currently being added\n\n    def press_2 (self):  # connecting function for button 2\n        # if statements to know if to add input to num1 or num2 variable\n        if self.op == 0:\n            self.num1 = numbers1(self.op, \"2\", self.num1) # calls function to add to num1\n            self.display.setText(self.num1) # sets display to numbers currently being added\n\n        elif self.op!= 0:\n            self.num2 = numbers2(self.op, \"2\", self.num2)  # calls function to add to num2\n            self.display.setText(self.num2)  # sets display to numbers currently being added\n\n    def press_3 (self):  # connecting function for button 3\n        # if statements to know if to add input to num1 or num2 variable\n        if self.op == 0:\n            self.num1 = numbers1(self.op, \"3\", self.num1) # calls function to add to num1\n            self.display.setText(self.num1) # sets display to numbers currently being added\n\n        elif self.op!= 0:\n            self.num2 = numbers2(self.op, \"3\", self.num2)  # calls function to add to num2\n            self.display.setText(self.num2)  # sets display to numbers currently being added\n\n    def press_4 (self):  # connecting function for button 4\n        # if statements to know if to add input to num1 or num2 variable\n        if self.op == 0:\n            self.num1 = numbers1(self.op, \"4\", self.num1) # calls function to add to num1\n            self.display.setText(self.num1) # sets display to numbers currently being added\n\n        elif self.op!= 0:\n            self.num2 = numbers2(self.op, \"4\", self.num2)  # calls function to add to num2\n            self.display.setText(self.num2)  # sets display to numbers currently being added\n\n    def press_5 (self):  # connecting function for button 5\n        # if statements to know if to add input to num1 or num2 variable\n        if self.op == 0:\n            self.num1 = numbers1(self.op, \"5\", self.num1) # calls function to add to num1\n            self.display.setText(self.num1) # sets display to numbers currently being added\n\n        elif self.op!= 0:\n            self.num2 = numbers2(self.op, \"5\", self.num2)  # calls function to add to num2\n            self.display.setText(self.num2)  # sets display to numbers currently being added\n\n    def press_6 (self):  # connecting function for button 6\n        # if statements to know if to add input to num1 or num2 variable\n        if self.op == 0:\n            self.num1 = numbers1(self.op, \"6\", self.num1) # calls function to add to num1\n            self.display.setText(self.num1) # sets display to numbers currently being added\n\n        elif self.op!= 0:\n            self.num2 = numbers2(self.op, \"6\", self.num2)  # calls function to add to num2\n            self.display.setText(self.num2)  # sets display to numbers currently being added\n\n    def press_7 (self):  # connecting function for button 7\n        # if statements to know if to add input to num1 or num2 variable\n        if self.op == 0:\n            self.num1 = numbers1(self.op, \"7\", self.num1) # calls function to add to num1\n            self.display.setText(self.num1) # sets display to numbers currently being added\n\n        elif self.op!= 0:\n            self.num2 = numbers2(self.op, \"7\", self.num2)  # calls function to add to num2\n            self.display.setText(self.num2)  # sets display to numbers currently being added\n\n    def press_8 (self):  # connecting function for button 8\n        # if statements to know if to add input to num1 or num2 variable\n        if self.op == 0:\n            self.num1 = numbers1(self.op, \"8\", self.num1) # calls function to add to num1\n            self.display.setText(self.num1) # sets display to numbers currently being added\n\n        elif self.op!= 0:\n            self.num2 = numbers2(self.op, \"8\", self.num2)  # calls function to add to num2\n            self.display.setText(self.num2)  # sets display to numbers currently being added\n\n    def press_9 (self):  # connecting function for button 9\n        # if statements to know if to add input to num1 or num2 variable\n        if self.op == 0:\n            self.num1 = numbers1(self.op, \"9\", self.num1) # calls function to add to num1\n            self.display.setText(self.num1) # sets display to numbers currently being added\n\n        elif self.op!= 0:\n            self.num2 = numbers2(self.op, \"9\", self.num2)  # calls function to add to num2\n            self.display.setText(self.num2)  # sets display to numbers currently being added\n\n\n    def plus (self): # additon function\n        if self.op >= 1:\n            answer = add(self.num1, self.num2)\n\n            self.num1 = answer\n            self.num2 = \"\"\n            self.operator = None\n            self.op = 0\n\n        self.operator = \"+\" # setting operator function to '+'\n        self.op += 1 # setting op check variable to true\n\n    def minus (self): # subtraction function\n        if self.op >= 1:\n            answer = sub(self.num1, self.num2)\n\n            self.num1 = answer\n            self.num2 = \"\"\n            self.operator = None\n            self.op = 0\n\n        self.operator = \"-\" # setting operator function to '-'\n        self.op += 1 # setting op check variable to true\n\n    def times (self): # multiplication function\n        if self.op >= 1:\n            answer = times(self.num1, self.num2)\n\n            self.num1 = answer\n            self.num2 = \"\"\n            self.operator = None\n            self.op = 0\n\n        self.operator = \"*\" # setting operator function to '*'\n        self.op += 1 # setting op check variable to true\n\n    def divide (self): # division function\n        if self.op >= 1:\n            answer = divide(self.num1, self.num2)\n\n            self.num1 = answer\n            self.num2 = \"\"\n            self.operator = None\n            self.op = 0\n\n        self.operator = \"/\" # setting operator function to '/'\n        self.op += 1 # setting op check variable to true\n\n    def sum (self):\n        if self.operator == \"*\":\n            self.answer = times(self.num1, self.num2)\n\n\n        elif self.operator == \"/\":\n            self.answer = divide(self.num1, self.num2)\n\n\n        elif self.operator == \"+\":\n            self.answer = add(self.num1, self.num2)\n\n\n        elif self.operator == \"-\":\n            self.answer = sub(self.num1, self.num2)\n\n\n        self.display.setText(str(self.answer))\n        self.operator = None\n        self.op = 0\n        self.num1 = \"\"\n        self.num2 = \"\"\n\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_ShareOpenGLContexts)\n    app = QtWidgets.QApplication(sys.argv)\n\n    ui_file_name = \"calculator_layout.ui\"\n    ui_file = QFile(ui_file_name)\n    if not ui_file.open(QIODevice.ReadOnly):\n        print(\"Cannot open {}: {}\".format(ui_file_name, ui_file.errorString()))\n        sys.exit(-1)\n    loader = QUiLoader()\n    dialog = loader.load(ui_file)\n    ui_file.close()\n    if not dialog:\n        print(loader.errorString())\n        sys.exit(-1)\n    dialog.show()\n    sys.exit(app.exec_())\n\"\"\"\n    Dialog = QtWidgets.QDialog()\n    ui = Ui_Dialog()\n    ui.setupUi(Dialog)\n    Dialog.show()\n    sys.exit(app.exec_())\n\"\"\"\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- main program/calculator_gui.py	(revision 804e0435f97276f294e97ce95f23b4bad4097e9f)
+++ main program/calculator_gui.py	(date 1644704757901)
@@ -378,6 +378,8 @@
 
 if __name__ == "__main__":
     import sys
+    """"
+    from PySide2.QtUiTools import QUiLoader
 
     QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_ShareOpenGLContexts)
     app = QtWidgets.QApplication(sys.argv)
@@ -390,16 +392,18 @@
     loader = QUiLoader()
     dialog = loader.load(ui_file)
     ui_file.close()
+
     if not dialog:
         print(loader.errorString())
         sys.exit(-1)
     dialog.show()
     sys.exit(app.exec_())
 """
+    app = QtWidgets.QApplication(sys.argv)
     Dialog = QtWidgets.QDialog()
     ui = Ui_Dialog()
     ui.setupUi(Dialog)
     Dialog.show()
     sys.exit(app.exec_())
-"""
+
 
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><h1 align=\"center\"> Simple Calculator </h1>\n \n\n<h1> What does this actually do? </h1>\n \n This is a simplisitic calculator which will perfom 2 number operations such as <b> 66*9 </b> .\n \n <h1> what do i need to run this? </h1>\n \n All you need for this is base python along with the PyQt5 libary which can simply be downloaded through your regular pip commands.\n \n <h1> How have I made this? </h1>\n \n Good question! So this is simply created using the PyQt5 Designer to build the GUI and labal all the componants before then implimenting the functions which all for the calculator to actually be aple to perfrom the calculations you wish to perform.\n \n <h1> So how do I use it? </h1>\n \n The program is sinply run by running the Calculator gui like so ....\n\n<img src=\"https://github.com/haz-baker/calculator/blob/master/opening.gif\">\n\n<h1> whats calc_fucntions? </h1>\n\nThis is simple set of commands which you can all feel free to use in order to solve mathmaticsal problesm without having to constantly repreat commands, saving time and lines!\n\n<h1> I've got a probelm?!? \uD83D\uDE31 </h1>\n\nIf you find any bugs or problems please feel free to create an issue (like this ... https://docs.github.com/en/github/managing-your-work-on-github/creating-an-issue ) andf iIwill respond as fast as I can!\uD83D\uDE0A \n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- README.md	(revision 804e0435f97276f294e97ce95f23b4bad4097e9f)
+++ README.md	(date 1644703569817)
@@ -25,4 +25,4 @@
 
 <h1> I've got a probelm?!? 😱 </h1>
 
-If you find any bugs or problems please feel free to create an issue (like this ... https://docs.github.com/en/github/managing-your-work-on-github/creating-an-issue ) andf iIwill respond as fast as I can!😊 
+If you find any bugs or problems please feel free to create an issue (like this ... https://docs.github.com/en/github/managing-your-work-on-github/creating-an-issue ) and I will respond as fast as I can!😊 
